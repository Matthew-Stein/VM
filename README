Repository from my Ubuntu VM. Learning the ropes.
Will be used in PCFC -- Practical Computing for Biologists

Ch4: Command Line Operations

Trying to call 'My Folder' will make the terminal search for
a directory called 'My' putting 'My\ Folder' tells it to include
the space in the full name.
(Review from REGEXs in ATBS and this book.)

Better just to avoid spaces and/or use _ instead.
ls -a nad ls -l both show signficantly more information.
ls -l is especially useful since it displays PERMISSIONS

Chapter 5: Handling text in the shell
> cat, grep, piping, etc.
> Using curl to grab from URL's
  Potentially flawed due to updated web security.

Chapter 6: Scripting with the shell
> making a script
	any text editor, save as .sh
	add #! /bin/bash to first line for any bash script
	save in the home/matt/scripts folder
	then change permission: chmod u+x 'scriptname'.sh
	Now you can call on it anywhere.

> Find and replace in Atom > click regex button then ^ for start of lines,
$ for end of lines. Use find and replace to hearts content.
> Use $1 , $2, etc instead of \1 \2 for captured groups replacement.
> didnt do the section on grabbing reference info with curl in a script,
due to permission/ id stuff.

Chapter 7-13 : Python Programming
Due to just having finished ATBS. Will just skim and write the occasional note
here. If anything intersting pops up I will go through it.

Chapter 7 Notes:
Calling env to raise python instead of direct is Better
#! /usr/bin/env python

Objects - super variables. With nested information in dot notation
ex. MyBike = object
    MyBike.Colour
    MyBike.Tires
    MyBike.Tires.Pressure
    etc etc.
    Methods (functions) can also be within this nest heirarchy
    MyBike.Steer(-4) #Steer to the left 4 degrees.

Chapter 8 Notes:
Nano:
  Alt ^ = copy
  shift U = paste
When using % placeholders: control interpretation with:
  %s = string, %d = integer, %f = float
  a dot then number put nex to % will round/show number of digits
  ex. %.2f - round float to 2 digits
Integer padding %5d will align right with space if the number is larger
 - for aligning outputs of different lengths.

Chapter 9 Notes:
type python to work directly in python console
REGEX:  [\w\s]+ - any number of words separated by spaces
        [A-Z]{3} - and combo of 3 letters

Chapter 10 Notes: Reading and Writing Files
use regex in python by first importing re
'import re' #just review from ATBS
"36 36.12 N" - regex match: ()\d+) ([\d\.]+) (\w)
remember r".." to read as raw text and escape the multiple \\ trap.
>review of functions
>translating to a .kml file - mostly skipped for now. Google earth datatype

Chapter 11 Notes: Merging files
> I dont really understand sys.argv
  >I kind of understand sys.argv  - to get the user to use arguments when
  calling script.
  Providing feedback with sys.stderr.write() so that the user knows whats
  happening but the output file doesnt get cluttered with log info.
>This chapter was so unpleasant.

Chapter 12:Modules and Libraries
> importing compenents from modules ex. from sys import argv
    Allows you to not need to do dot notation all the time.
    can just argv instead of sys.argv
> can also: from sys import *
  but kinda sketchy cause you might use one of those terms by accident.
> urllib - smarter curl
> os.popen("...").read() - can send terminal commands from inside python script
Numpy:
  MyArray = array([[1,2,3],[4,5,6],[7,8,9]])
  MyArray
  MyRow = MyArray[1,:]
  MyRow
  MyArray[:2,:2]
#### Ubunto vm has python 2 and 3
Remmber to call python3 when meaning to
  ex. anything with biopython
Extensive Biopython tutorial: tinyurl.com/pcfb-biopy
>making you own modules by saving codeblock as a .py file
import the .py file, and then can use def defined modules in code
just like if they were defined in the current program.

Chapter 13: debugging strategies
> never work on an un-backed up dataset (straightforward)
>triple quotes """ ... """ is how to do block commenting - both for more
documentation or for commenting out large section for testing.
> print statments to error check
>Rubber duck debugging - remember the concept of handing down a package
to each chunk of code


Chapter 14: Combining Methods
>wget - another curl type alternative? Better for what usecase?
  Book says Linux-specific
Tools so far:
  REGEXs
  Shell commands
  Shell scripts
  Python Programs
Chapter guides when to combine which tool:
>multiple flowcharts for different circumstances:
      Data from internet/programs/hardware
      Parsing one set of text Files
      parsing many text files
>Best Practice: Keep a Detailed record of what you have done. Esp in science.
  Notes, exact programs used, scripts saved, etc.

Ch 15 Notes: Relational Databases
> Data organization: Every Row should have all the information
  Full square blocks of full grids of info. Not some with some columns others
  without.
    Exactly how R works with data, how Numpy prefers, etc.
    One large grid with single header.
    Raw, unprocessed data entry in the spreadsheets.
> Moving beyond two-dimensional grids:
    Some datasets not well suited for 2d arrays, ex Phylogenies.
    Option: Complex (text based) dataset format:XML - most widely used.
        Not covered in this book.
Relational Databases:
  Relational Database Management System (RDBMS) - continuously running
  server program that manages 1 or more databases.
  Ex. FileMaker, MS Access, Oracle, etc.
  Open Source options: MySQL, PostgreSQL, SQLite.
  All use Structured Query Language (SQL) - learn once, can use most db software
  R, Python, Matlab, and web servers can all interact directly with SQL DBs
  >These are primarily for LARGE scale projects. Kind of overkill for smaller
  personal projects or one-off analyses.

  One RDBMS server can hold any number of databases, which in turn contains
  two-dimensional arrays/tables that hold the actual data.

  >When creating a table, one column will be designated the 'primary key'
  for that table, and row queries are based off that key column.

MYSQL: (Basics)
Enter mysql:
  'mysql -u root -p'
  (password)
Test if running: 'systemctl status mysql.service'
if not running: 'sudo systemctl start mysql'
Alt w/ version: 'sudo mysqladmin -p -u root version'

Dont ever ctrl-c in MySQL - terminates the server. use \c instead.
Inside MySQL:
    SHOW DATABASES;
    HELP;
    EXIT;
    CREATE DATABASE <name>; #ex. midwater
    USE <name> ; #selects it - now everything commands just that database
    CREATE TABLE <name> (list coloums in the brackets)
    ex. CREATE TABLE  specimens (specimen_id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY, )
    # that gets the primary key requirement out of the way without fucking with it too much
    then you add all the other columns and what type of data they are.
    format: <name> TYPE,
    DESCRIBE <table>; #shows info about the table
    SHOW TABLES; and DESCRIBE <table> are the ls of mysql - navigation

    Inserting data by hand:
    INSERT INTO specimens set
    vehicle = 'Tiburon',
    dive = 596,
    etc etc. Need to be in the format described in DESCRIBE <table>

    Viewing data:
      SELECT * FROM specimens; #prints out the table in terminal


      #The described script to add the data to the database doesnt work.
      ?

      Other methods worked out.

    Modifying SQL tables:
      UPDATE ctd SET vehicle='TIBURON' WHERE vehicle='tibr';

Skimmed over the last third of chapter. If I need to use SQL in future,
this is a great resource. But for now will pass.
  Most of the datasets I could be working with soon are much smaller than most
  that would require heavy SQL use.

Chapter 16 Notes: Advanced Shell and Pipelines
review - cat and grep
  head and tail for just the top and just the bottom
  piping one into another. ex. history | tail -n -15
> cut - extracts just certain columns from a file.
  -f indicates a range of columns
ex head -n 20 /vm/pcfb/examples/ctd.txt | cut -f 5,7,9 -d
> uniq - finds number of unique instances of a value

Combining advanced shell functions.
>head -n 2 *.pdb - grabs the top 2 lines of any .pdb file
>grep ATOM structure_1gfl.pdb | grep -v REMARK
    Grabs lines with ATOM them removes lines that contain REMARK
    > Can get lots of processing in single lines:
    grep ATOM structure_1gfl.pdb | grep -v REMARK | cut -c 18-21,24-26
    | sort|uniq| cut -f 1 -d " " |uniq -c |sort -nr

Aliases - can be created as sort of mini functions that you can call again with
a keyword (alias) - only temporary until you save them it the .bashrc setting file.

Functions -can also be made, with series of commands sequentially like a program
these also need to be saves in .bashrc (or .bash_profile? maybe just osx)
 $1,$2 etc become user defined variables that you can include values of when
 running the functions.
 ex. repeater(){
> echo "$1 is what you said first"
> echo "$@ is everything you said"
> }
then can use: repeater 1 2 3
Always need to supply the arguments/inputs
- Great for frequently used shell commands
Note: Indendation does nothing in the shell. dont use tabs.
> pg 314+ - Many examples of potential functions here.

Wrappers - control and expand functionality of other programs.
  Ex. combination of python and shell commands.
    Exploring this stitching togther of programs and in/outputs is what is
    reffered to as a Pipeline.
Pipelines- great to ensure no user error in replicating inputs
        - faster for redoing processes
        - good record of what I have done.
        review: API's are what aid program to program connections.

Part V: Graphics
Chapter 17: Graphical Concepts
